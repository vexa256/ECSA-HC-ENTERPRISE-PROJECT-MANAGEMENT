<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('mpa_indicators', function (Blueprint $table) {

            // Primary key – can be a short string or UUID
            $table->string('id', 50)->primary();

            // The entity the indicator belongs to (e.g., Rwanda, IGAD, ECSA, Kenya, etc.)
            $table->string('EntityID', 255);

            // Primary Category: 'CRF' for country-specific or 'RRF' for regional-specific indicators
            $table->enum('PrimaryCategory', ['CRF', 'RRF'])->default('CRF');

            // Unique Indicator Identifier (IID) – a 4‑character code or a UUID generated by MySQL
            $table->string('IID', 255)
                ->unique()
            ;

            // Secondary Category distinguishes between PDO and Intermediate indicators,
            // with variants for country (CRF) and regional (RRF)
            $table->enum('SecondaryCategory', ['CRF PDO', 'CRF Intermediate', 'RRF PDO', 'RRF Intermediate']);

            // The indicator title or statement
            $table->string('Indicator', 255);
            $table->text('IndicatorDefinition')->nullable();
            $table->text('IndicatorQuestion')->nullable();
            $table->text('RemarksComments')->nullable();
            $table->string('SourceOfData', 255)->nullable();

            // ResponseType tells the user (and system) the expected answer format.
            // Note: For standardized scoring, all values are converted at entry time.
            $table->enum('ResponseType', ['Text', 'Number', 'Boolean', 'Percentage', 'Yes/No']);

            // Reporting period info (if needed on a per-row basis)
            $table->string('ReportingPeriod', 50)->nullable();

            // A human‑readable overall expected target (for display purposes)
            $table->string('ExpectedTarget', 255)->nullable();

            /*
                  * Standardized baseline and target values.
                  * All raw inputs are converted (at data entry) to decimals so that the scoring logic works on uniform data.
                  */
            $table->string('BaselinePAD2023')->nullable();
            $table->string('Baseline2024')->nullable();
            $table->string('TargetYearOne2024')->nullable();
            $table->string('TargetYearTwo2025')->nullable();
            $table->string('TargetYearThree2026')->nullable();
            $table->string('TargetYearFour2027')->nullable();
            $table->string('TargetYearFive2028')->nullable();
            $table->string('TargetYearSix2029')->nullable();
            $table->string('TargetYearSeven2030')->nullable();

            /*
                  * Intelligent meta data columns.
                  */
            $table->enum('meta_target_format', ['number', 'percentage', 'fraction', 'mixed', 'text'])
                ->default('number')
                ->comment('Specifies the original format of the target value before standardization.');

            $table->enum('meta_scoring_logic', ['greater_is_better', 'less_is_better', 'exact_match', 'range'])
                ->default('exact_match')
                ->comment('Indicates how scoring should be applied for this indicator.');

            $table->enum('meta_conversion_method', ['none', 'fraction_to_decimal', 'strip_percentage'])
                ->default('none')
                ->comment('Specifies which conversion was applied to standardize the value.');

            $table->json('meta_extra')->nullable()->comment('Additional meta data for custom scoring logic or instructions.');

            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('mpa_indicators');
    }
};