Our database is designed to capture and report performance data across multiple organizational layers. At the top level, the strategic_objectives table defines high-level goals, with each objective uniquely identified by its StrategicObjectiveID. These strategic objectives are measured via various metrics stored in the performance_indicators table; each indicator is linked to a strategic objective through its SO_ID field (which corresponds to the StrategicObjectiveID). Each performance indicator includes baseline values and multiple target values for different reporting years, and it specifies the accountable clusters using a JSON‑encoded Responsible_Cluster field. The clusters table holds detailed information about each cluster or project and is referenced in two ways: directly in the cluster_performance_mappings table—which records the actual performance responses—and indirectly through the indicators’ Responsible_Cluster field. The cluster_performance_mappings table acts as a junction, associating each performance response with a specific performance indicator (via IndicatorID), strategic objective (via SO_ID), reporting period (via ReportingID), and also identifies the cluster and user responsible for the entry. The reporting periods themselves are defined in the ecsahc_timelines table, which includes essential metadata such as the report name, year, closing date, and status; this contextualizes the performance data. Finally, the users table stores information about the individuals who submit the data—including their roles and associated clusters—thus linking the human element to the performance records.

In terms of view rendering, every controller method returns views using a shared layout pattern, specifically with Laravel Blade templates in conjunction with the Tabler Admin template and Bootstrap 5. All views are returned using calls like view('scrn', [...]) to ensure consistency across the application. Each view receives a descriptive message (Desc) that provides context for the page, a Page variable that indicates the specific Blade template to be used (such as "StrategicPerformance.SelectYear" or "StrategicPerformance.Overview"), and any additional data required by that page (such as lists of years, timelines, or aggregated performance reports). It is essential that any modifications or generated code never change the front-end technology stack: the application must continue to use Laravel Blade, the Tabler Admin template, and Bootstrap 5. This requirement must be strictly maintained so that the design, styling, and overall front-end behavior remain consistent with the current implementation.